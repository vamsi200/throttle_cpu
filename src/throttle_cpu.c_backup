#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>

#define MAX_TEMPERATURE 80.00
float cpu_temp;

float get_cpu_temp(void) {
    FILE *open_file = fopen("/sys/class/thermal/thermal_zone0/temp", "r");
    if (open_file == NULL){
        perror("Error:: Couldn't Read CPU Temperature");
        return -1; 
    } else {
        fscanf(open_file, "%f", &cpu_temp);
        fclose(open_file);
        return cpu_temp / 1000.00;
    }
}

int get_max_frequency(int cpu) {
    char max_cpu_freq_filepath[256];
    snprintf(max_cpu_freq_filepath, sizeof(max_cpu_freq_filepath), "/sys/devices/system/cpu/cpu%d/cpufreq/scaling_max_freq", cpu);
    
    FILE *fp_max = fopen(max_cpu_freq_filepath, "r");
    if (fp_max == NULL) {
        perror("Error:: Couldn't Read CPU Frequency");
        return -1;     
    }
    
    int max_scaling_freq;
    if (fscanf(fp_max, "%d", &max_scaling_freq) != 1) {
        perror("Error:: reading max scaling frequency");
        fclose(fp_max);
        return -1; 
    }
    
    fclose(fp_max);
    return max_scaling_freq;
}

int change_cpu_frequency(int cpu, int frequency) {
    char max_cpu_freq_filepath[256];
    snprintf(max_cpu_freq_filepath, sizeof(max_cpu_freq_filepath), "/sys/devices/system/cpu/cpu%d/cpufreq/scaling_max_freq", cpu);
   
    FILE *fp_set = fopen(max_cpu_freq_filepath, "w");
    if (fp_set == NULL) {
        perror("Error:: Couldn't Set Throttled Frequency");
        return -1;     
    }
    
    fprintf(fp_set, "%d", frequency);
    fclose(fp_set);
    return 0; 
}

int get_original_cpu_frequency(int cpu){
    char get_cpumax_fq_info[256];
    snprintf(get_cpumax_fq_info, sizeof(get_cpumax_fq_info), "/sys/devices/system/cpu/cpu%d/cpufreq/cpuinfo_max_freq", cpu);
    FILE *fp = fopen(get_cpumax_fq_info, "r");

    if (fp == NULL){
        perror("ERROR:: Couldn't read `CPUMAX_FQ_INFO`");
        return -1;
    }
    int original_cpu_freq;
    if (fscanf(fp, "%d", &original_cpu_freq) != 1){
        perror("ERROR:: Couldn't read `Original_Cpu_Freq`");
        fclose(fp);
        return -1;
    }
    
    fclose(fp);
    return original_cpu_freq;
}

int set_to_original_frequency(int cpu, int frequency){
    char scaling_max_fq_info[256];
    snprintf(scaling_max_fq_info, sizeof(scaling_max_fq_info), "/sys/devices/system/cpu/cpu%d/cpufreq/scaling_max_freq", cpu);
    FILE *fp = fopen(scaling_max_fq_info, "w");
    if (fp == NULL){
        perror("ERROR:: Couldn't write `scaling_max_freq`");
        return -1;
    }
    fprintf(fp, "%d", frequency);
    fclose(fp);
    return 0;
}

void throttle(){
    int max_cpu = sysconf(_SC_NPROCESSORS_ONLN);

    for (int cpu = 0; cpu < max_cpu; cpu++) {
        int max_freq = get_max_frequency(cpu);
        if (max_freq < 0) {
            continue;
        }
        
        int throttle_freq = max_freq / 2;
        printf("CPU%d: Max Frequency = %d Hz, Throttled Frequency = %d Hz\n", cpu, max_freq, throttle_freq);
        
        if (change_cpu_frequency(cpu, throttle_freq) < 0) {
            continue; 
        }
    }
}

void unthrottle(){
    int max_cpu = sysconf(_SC_NPROCESSORS_ONLN);

    for (int cpu = 0; cpu < max_cpu; cpu++){
        int original_frequency = get_original_cpu_frequency(cpu);
        if (original_frequency < 0){
            continue;
        }
        printf("CPU%d: Current Max Frequency = %d Hz, Original Frequency = %d Hz\n", cpu, get_max_frequency(cpu), original_frequency);

        if (set_to_original_frequency(cpu, original_frequency) < 0) {
            continue; 
        }
    }
}

int main() {
    float temp = get_cpu_temp();
    if (temp < 0) {
        printf("Error reading CPU temperature.\n");
    } else if (temp > MAX_TEMPERATURE) {
        throttle();
	sleep(10);
	printf("Starting Unthrottling..");
	unthrottle();	
    } else {
        printf("TEMP IS FINE!! %.2f", temp);
    }

    return 0;
}
